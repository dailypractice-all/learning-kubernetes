# here we are creating a single container in a pod
#kind: Pod
#apiVersion: v1
#metadata:
#  name: sample1
#spec:
#  containers:
#    - name: nginx
#      image: nginx

# here we are creating two container in a pod
#kind: Pod
#apiVersion: v1
#metadata:
#  name: sample2
#spec:
#  containers:
#    - name: nginx
#      image: nginx
#    - name: mongodb
#      image: mongo

# in this we are creating a two container in a pod with command
# to exec to a container we use command kubectl exec -it sample3 -c centos -- bash
#kind: Pod
#apiVersion: v1
#metadata:
#  name: sample3
#spec:
#  containers:
#    - name: nginx
#      image: nginx
#    - name: centos
#      image: centos:7
#      command: ["sleep", "1000000"]

# in this we one container with some resoures to give cpu 5000 means 1 cpu = 1000 milicore
---
kind: Pod
apiVersion: v1
metadata:
  name: sample4
spec:
  containers:
    - name: nginx
      image: nginx
      resources:
        requests:
          cpu: "50m"
          memory: "128Mi"
        limits:
          cpu: "100m"
          memory: "256Mi"
#herewe are also crating one container with the env variable URL and with the value and kubectl exec -it sample3 -c centos -- bash and then use env command
#kind: Pod
#apiVersion: v1
#metadata:
#  name: sample5
#spec:
#  containers:
#    - name: nginx
#      image: nginx
#      env:
#        - name: URL
#          value: example.com

# in this we are using config maps to give environment variable to all the pods when they created.
#kind: ConfigMap
#apiVersion: v1
#metadata:
#  name: configmap1
#data:
#  URL: example.com
#  SUBDOMAIN: sample
#  FQDN: sample.example.com
#---
#kind: Pod
#apiVersion: v1
#metadata:
#  name: sample6
#spec:
#  containers:
#    - name: centos
#      image: centos:7
#      command: ["sleep", "10000"]
#      envFrom:
#        - configMapRef:
#            name: configmap1

# here we are declearing the secrets with the encription format by using command line by giving command echo admin1 | base64 and to decode the user name we use command echo <encripted format> | base64 --decode
#kind: Secret
#apiVersion: v1
#metadata:
#  name: secret1
#data:
#  dbUsername: YWRtaW4x
#  dbPassword: YWRtaW4xMjM0
#---
#kind: Pod
#apiVersion: v1
#metadata:
#  name: sample7
#spec:
#  containers:
#    - name: centos
#      image: centos:7
#      command: ["sleep", "10000"]
#      envFrom:
#        - secretRef:
#            name: secret1

# here we are checking the health check of the container by this it will automatically check the health of a container for 30 secounds and it didn't came up it will kill the container and create a new container.
#apiVersion: v1
#kind: Pod
#metadata:
#  name: sample8
#spec:
#  containers:
#    - name: liveness
#      image: k8s.gcr.io/busybox
#      args:
#        - /bin/sh
#        - -c
#        - touch /tmp/healthy; sleep 30; rm -f /tmp/healthy; sleep 60
#      readinessProbe:
#        exec:
#          command:
#            - cat
#            - /tmp/healthy
#        initialDelaySeconds: 5
#        periodSeconds: 5
#      livenessProbe:
#        exec:
#          command:
#            - cat
#            - /tmp/healthy
#        initialDelaySeconds: 5
#        periodSeconds: 5
